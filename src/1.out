 VID :  it
 PAT 
 VID :  int
 TYCON :  int
 PAT 
 VID :  x
 PAT 
 VID :  int
 TYCON :  int
 PAT 
int :  10
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
 VID :  double
 PAT 
 VID :  int
 TYCON :  int
 VID :  int
 TYCON :  int
 PAT 
 VID :  x
 PAT 
 VID :  int
 TYCON :  int
 PAT 
 VID :  x
 VID :  mul
int :  2
 EMPTY 
 EXP 
 MRULE 
 MATCH 
 EXP 
 VALBIND 
 DEC  val
 EMPTY 
 DECS 
 DECS 
 DECS 
 VID :  double
 VID :  x
 EMPTY 
 EXP 
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': ([Declaration, Declaration], Expression), 'record': None, 'scope': None, 'cls': 'Let', 'type': None}
      ([Declaration, Declaration], Expression)
          {'binds': valbind, 'cls': 'val'}
            {'exp': Expression, 'pat': Pattern}
              {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
                {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 10, 'tycon': TyCon}
                  {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
              {'type': None, 'record': None, 'value': Value}
                {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
                  {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
          {'binds': valbind, 'cls': 'val'}
            {'exp': Expression, 'pat': Pattern}
              {'reg': [(Pattern, Expression)], 'record': None, 'scope': None, 'cls': 'Fn', 'type': None}
                  (Pattern, Expression)
                    {'type': None, 'record': None, 'value': Value}
                      {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
                        {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
                    {'reg': [Expression, Expression, Expression], 'record': None, 'scope': None, 'cls': 'App', 'type': None}
                        {'reg': Value, 'record': None, 'scope': None, 'cls': 'App', 'type': None}
                          {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
                        {'reg': Value, 'record': None, 'scope': None, 'cls': 'App', 'type': None}
                          {'vcon': None, 'id': 'mul', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
                        {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
                          {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 2, 'tycon': TyCon}
                            {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
              {'type': None, 'record': None, 'value': Value}
                {'vcon': None, 'id': 'double', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
                  {'len': 0, 'size': 0, 'type': (TyCon, TyCon), 'tyvar': [], 'name': None}
                    (TyCon, TyCon)
                      {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
                      {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'reg': [Expression, Expression], 'record': None, 'scope': None, 'cls': 'App', 'type': None}
            {'reg': Value, 'record': None, 'scope': None, 'cls': 'App', 'type': None}
              {'vcon': None, 'id': 'double', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
            {'reg': Value, 'record': None, 'scope': None, 'cls': 'App', 'type': None}
              {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
    {'type': None, 'record': None, 'value': Value}
      {'vcon': None, 'id': 'it', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
        {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
 VID :  it
 PAT 
 VID :  int
 TYCON :  int
 PAT 
 VID :  s
 PAT 
 VID :  string
 TYCON :  string
 PAT 
string :  Hello World!

 EMPTY 
 EXP 
 VALBIND 
 DEC  val
 EMPTY 
 DECS 
 DECS 
 VID :  print
int :  1
 EMPTY 
 EXP 
int :  0
 EMPTY 
 EXP 
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
{'binds': valbind, 'cls': 'val'}
<class 'ast.Declaration'>
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
LET:  {'reg': ([Declaration], [Expression, Expression]), 'record': None, 'scope': None, 'cls': 'Let', 'type': None}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}}
valbind checked:  {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
R:  {'vcon': None, 'id': 'print', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
FN:  ('string', 'unit')
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
Function call  1  :  ('string', 'unit')
 VID :  it
 PAT 
 VID :  int
 TYCON :  int
 PAT 
 VID :  a
 PAT 
 VID :  int
 TYCON :  int
 PAT 
real :  1.0
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
 VID :  s
 PAT 
 VID :  string
 TYCON :  string
 PAT 
string :  Hello World!

 EMPTY 
 EXP 
 VALBIND 
 DEC  val
 EMPTY 
 DECS 
 DECS 
 DECS 
 VID :  print
 VID :  s
 EMPTY 
 EXP 
int :  0
 EMPTY 
 EXP 
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
{'binds': valbind, 'cls': 'val'}
<class 'ast.Declaration'>
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
LET:  {'reg': ([Declaration, Declaration], [Expression, Expression]), 'record': None, 'scope': None, 'cls': 'Let', 'type': None}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}}
 VID :  it
 PAT 
 VID :  int
 TYCON :  int
 PAT 
 VID :  s
 PAT 
 VID :  string
 TYCON :  string
 PAT 
string :  Hello World!

 EMPTY 
 EXP 
 VALBIND 
 DEC  val
 EMPTY 
 DECS 
 DECS 
 VID :  print
 VID :  s
 EMPTY 
 EXP 
int :  0
 EMPTY 
 EXP 
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': ([Declaration], [Expression, Expression]), 'record': None, 'scope': None, 'cls': 'Let', 'type': None}
      ([Declaration], [Expression, Expression])
          {'binds': valbind, 'cls': 'val'}
            {'exp': Expression, 'pat': Pattern}
              {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
                {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 'Hello World!\n', 'tycon': TyCon}
                  {'len': 0, 'size': 4, 'type': 'string', 'tyvar': [], 'name': 'string'}
              {'type': None, 'record': None, 'value': Value}
                {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
                  {'len': 0, 'size': 4, 'type': 'string', 'tyvar': [], 'name': 'string'}
          {'reg': [Expression, Expression], 'record': None, 'scope': None, 'cls': 'App', 'type': None}
              {'reg': Value, 'record': None, 'scope': None, 'cls': 'App', 'type': None}
                {'vcon': None, 'id': 'print', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
              {'reg': Value, 'record': None, 'scope': None, 'cls': 'App', 'type': None}
                {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
          {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 0, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
    {'type': None, 'record': None, 'value': Value}
      {'vcon': None, 'id': 'it', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
        {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
{'binds': valbind, 'cls': 'val'}
<class 'ast.Declaration'>
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
LET:  {'reg': ([Declaration], [Expression, Expression]), 'record': None, 'scope': None, 'cls': 'Let', 'type': None}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}}
valbind checked:  {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
R:  {'vcon': None, 'id': 'print', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
FN:  ('string', 'unit')
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
R:  {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
Function call  1  :  ('string', 'unit')
Get into an expression, the scope is:  {'__parent__': {'__parent__': {'print': Value}}, 's': Value}
valbind checked:  {'vcon': None, 'id': 'it', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
Type Check finished! 
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': ([Declaration], [Expression, Expression]), 'record': None, 'scope': {'__parent__': {'print': Value}, 'it': Value}, 'cls': 'Let', 'type': 'int'}
      ([Declaration], [Expression, Expression])
          {'binds': valbind, 'cls': 'val'}
            {'exp': Expression, 'pat': Pattern}
              {'reg': Value, 'record': None, 'scope': {'__parent__': {'__parent__': {'print': Value}, 'it': Value}, 's': Value}, 'cls': 'Constant', 'type': 'string'}
                {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 'Hello World!\n', 'tycon': TyCon}
                  {'len': 0, 'size': 4, 'type': 'string', 'tyvar': [], 'name': 'string'}
              {'type': 'string', 'record': None, 'value': Value}
                {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
                  {'len': 0, 'size': 4, 'type': 'string', 'tyvar': [], 'name': 'string'}
          {'reg': [Expression, Expression], 'record': None, 'scope': {'__parent__': {'__parent__': {'print': Value}, 'it': Value}, 's': Value}, 'cls': 'App', 'type': 'unit'}
              {'reg': Value, 'record': None, 'scope': {'__parent__': {'__parent__': {'print': Value}, 'it': Value}, 's': Value}, 'cls': 'App', 'type': ('string', 'unit')}
                {'vcon': None, 'id': 'print', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
                ('string', 'unit')
              {'reg': Value, 'record': None, 'scope': {'__parent__': {'__parent__': {'print': Value}, 'it': Value}, 's': Value}, 'cls': 'App', 'type': 'string'}
                {'vcon': None, 'id': 's', 'op': False, 'wildcard': False, 'value': None, 'tycon': None}
          {'reg': Value, 'record': None, 'scope': {'__parent__': {'__parent__': {'print': Value}, 'it': Value}, 's': Value}, 'cls': 'Constant', 'type': 'int'}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 0, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
    {'type': 'int', 'record': None, 'value': Value}
      {'vcon': None, 'id': 'it', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
        {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
Test:  val {x = a : int, y = b : real} = {x = 1, y = 2.0}
 VID :  x
 LAB :  x
 VID :  a
 PAT 
 VID :  int
 TYCON :  int
 PAT 
 VID :  y
 LAB :  y
 VID :  b
 PAT 
 VID :  real
 TYCON :  real
 PAT 
 PAT 
 VID :  x
 LAB :  x
int :  1
 EMPTY 
 EXP 
 VID :  y
 LAB :  y
real :  2.0
 EMPTY 
 EXP 
 EXPROW 
 EXPROW 
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': [RecordItem, RecordItem], 'record': None, 'scope': None, 'cls': 'Record', 'type': None}
        {'type': None, 'lab': 'x', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 1, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'type': None, 'lab': 'y', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 2.0, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'real', 'tyvar': [], 'name': 'real'}
    {'type': None, 'record': None, 'value': [RecordItem, RecordItem]}
        {'type': None, 'lab': 'x', 'value': Pattern}
          {'type': None, 'record': None, 'value': Value}
            {'vcon': None, 'id': 'a', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'type': None, 'lab': 'y', 'value': Pattern}
          {'type': None, 'record': None, 'value': Value}
            {'vcon': None, 'id': 'b', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'real', 'tyvar': [], 'name': 'real'}
{'binds': valbind, 'cls': 'val'}
<class 'ast.Declaration'>
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
valbind checked:  [RecordItem, RecordItem]
Type Check finished! 
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': [RecordItem, RecordItem], 'record': {'y': Expression, 'x': Expression}, 'scope': {'__parent__': {'print': Value}, 'a': Value, 'b': Value}, 'cls': 'Record', 'type': {'y': 'real', 'x': 'int'}}
        {'type': None, 'lab': 'x', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': {'__parent__': {'print': Value}, 'a': Value, 'b': Value}, 'cls': 'Constant', 'type': 'int'}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 1, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'type': None, 'lab': 'y', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': {'__parent__': {'print': Value}, 'a': Value, 'b': Value}, 'cls': 'Constant', 'type': 'real'}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 2.0, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'real', 'tyvar': [], 'name': 'real'}
    {'type': {'y': 'real', 'x': 'int'}, 'record': {'y': Pattern, 'x': Pattern}, 'value': [RecordItem, RecordItem]}
        {'type': None, 'lab': 'x', 'value': Pattern}
          {'type': 'int', 'record': None, 'value': Value}
            {'vcon': None, 'id': 'a', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'type': None, 'lab': 'y', 'value': Pattern}
          {'type': 'real', 'record': None, 'value': Value}
            {'vcon': None, 'id': 'b', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'real', 'tyvar': [], 'name': 'real'}
Test:  val x : {x : int, y : real} = {x = 1, y = 2.0}
 VID :  x
 PAT 
 VID :  x
 LAB :  x
 VID :  int
 TYCON :  int
 VID :  y
 LAB :  y
 VID :  real
 TYCON :  real
 TYROW :  4
 TYROW :  6
 TY 
 PAT 
 VID :  x
 LAB :  x
int :  1
 EMPTY 
 EXP 
 VID :  y
 LAB :  y
real :  2.0
 EMPTY 
 EXP 
 EXPROW 
 EXPROW 
 EMPTY 
 EXP 
 VALBIND 
 DEC  val
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': [RecordItem, RecordItem], 'record': None, 'scope': None, 'cls': 'Record', 'type': None}
        {'type': None, 'lab': 'x', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 1, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'type': None, 'lab': 'y', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': None, 'cls': 'Constant', 'type': None}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 2.0, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'real', 'tyvar': [], 'name': 'real'}
    {'type': None, 'record': None, 'value': Value}
      {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
        {'len': 0, 'size': 0, 'type': {'y': TyCon, 'x': TyCon}, 'tyvar': [], 'name': 'record'}
{'binds': valbind, 'cls': 'val'}
<class 'ast.Declaration'>
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
Get into an expression, the scope is:  {'__parent__': {'print': Value}}
valbind checked:  {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
Type Check finished! 
{'binds': valbind, 'cls': 'val'}
  {'exp': Expression, 'pat': Pattern}
    {'reg': [RecordItem, RecordItem], 'record': {'y': Expression, 'x': Expression}, 'scope': {'__parent__': {'print': Value}, 'x': Value}, 'cls': 'Record', 'type': {'y': 'real', 'x': 'int'}}
        {'type': None, 'lab': 'x', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': {'__parent__': {'print': Value}, 'x': Value}, 'cls': 'Constant', 'type': 'int'}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 1, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'int', 'tyvar': [], 'name': 'int'}
        {'type': None, 'lab': 'y', 'value': Expression}
          {'reg': Value, 'record': None, 'scope': {'__parent__': {'print': Value}, 'x': Value}, 'cls': 'Constant', 'type': 'real'}
            {'vcon': None, 'id': None, 'op': False, 'wildcard': False, 'value': 2.0, 'tycon': TyCon}
              {'len': 0, 'size': 4, 'type': 'real', 'tyvar': [], 'name': 'real'}
    {'type': {'y': 'real', 'x': 'int'}, 'record': None, 'value': Value}
      {'vcon': None, 'id': 'x', 'op': False, 'wildcard': False, 'value': None, 'tycon': TyCon}
        {'len': 0, 'size': 0, 'type': {'y': TyCon, 'x': TyCon}, 'tyvar': [], 'name': 'record'}
